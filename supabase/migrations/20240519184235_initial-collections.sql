create table "public"."link" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid not null,
    "url" text not null,
    "description" text,
    "meta_data" json,
    "collection" bigint not null
);


alter table "public"."link" enable row level security;

create table "public"."link_collection" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid not null,
    "title" text not null,
    "description" text,
    "fingerprint" text not null
);


alter table "public"."link_collection" enable row level security;

CREATE UNIQUE INDEX link_collection_fingerprint_key ON public.link_collection USING btree (fingerprint);

CREATE UNIQUE INDEX link_collection_pkey ON public.link_collection USING btree (id);

CREATE UNIQUE INDEX link_pkey ON public.link USING btree (id);

alter table "public"."link" add constraint "link_pkey" PRIMARY KEY using index "link_pkey";

alter table "public"."link_collection" add constraint "link_collection_pkey" PRIMARY KEY using index "link_collection_pkey";

alter table "public"."link" add constraint "link_collection_fkey" FOREIGN KEY (collection) REFERENCES link_collection(id) ON DELETE CASCADE not valid;

alter table "public"."link" validate constraint "link_collection_fkey";

alter table "public"."link" add constraint "link_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."link" validate constraint "link_created_by_fkey";

alter table "public"."link_collection" add constraint "link_collection_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."link_collection" validate constraint "link_collection_created_by_fkey";

alter table "public"."link_collection" add constraint "link_collection_fingerprint_key" UNIQUE using index "link_collection_fingerprint_key";

create policy "Can read without constraints"
on "public"."link"
as permissive
for select
to public
using (true);


create policy "Can only insert collections as yourself"
on "public"."link_collection"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = created_by));


create policy "Can only update your own collections"
on "public"."link_collection"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = created_by))
with check ((( SELECT auth.uid() AS uid) = created_by));


create policy "Can read without constraints"
on "public"."link_collection"
as permissive
for select
to public
using (true);




